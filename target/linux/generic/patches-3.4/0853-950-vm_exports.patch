From c7da0ec2267a5596100d62046d8afbb08681f331 Mon Sep 17 00:00:00 2001
From: OpenWRT <test@example.com>
Date: Thu, 30 May 2013 16:18:24 +0400
Subject: [PATCH 853/859] 950-vm_exports

---
 fs/file.c           |  1 +
 include/linux/mm.h  |  1 +
 kernel/exit.c       |  2 ++
 kernel/sched/core.c |  1 +
 mm/memory.c         |  2 ++
 mm/shmem.c          | 17 ++++++++++++-----
 mm/vmalloc.c        |  2 ++
 7 files changed, 21 insertions(+), 5 deletions(-)

diff --git a/fs/file.c b/fs/file.c
index ba3f605..c123267 100644
--- a/fs/file.c
+++ b/fs/file.c
@@ -269,6 +269,7 @@ int expand_files(struct files_struct *files, int nr)
 	/* All good, so we try */
 	return expand_fdtable(files, nr);
 }
+EXPORT_SYMBOL_GPL(expand_files);
 
 static int count_open_files(struct fdtable *fdt)
 {
diff --git a/include/linux/mm.h b/include/linux/mm.h
index 441a564..01ebcc5 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -873,6 +873,7 @@ extern bool skip_free_areas_node(unsigned int flags, int nid);
 
 int shmem_lock(struct file *file, int lock, struct user_struct *user);
 struct file *shmem_file_setup(const char *name, loff_t size, unsigned long flags);
+void shmem_set_file(struct vm_area_struct *vma, struct file *file);
 int shmem_zero_setup(struct vm_area_struct *);
 
 extern int can_do_mlock(void);
diff --git a/kernel/exit.c b/kernel/exit.c
index bfbd856..8d9cac9 100644
--- a/kernel/exit.c
+++ b/kernel/exit.c
@@ -501,6 +501,7 @@ struct files_struct *get_files_struct(struct task_struct *task)
 
 	return files;
 }
+EXPORT_SYMBOL_GPL(get_files_struct);
 
 void put_files_struct(struct files_struct *files)
 {
@@ -522,6 +523,7 @@ void put_files_struct(struct files_struct *files)
 		rcu_read_unlock();
 	}
 }
+EXPORT_SYMBOL_GPL(put_files_struct);
 
 void reset_files_struct(struct files_struct *files)
 {
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index e1718bc..cbfc504 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -4048,6 +4048,7 @@ int can_nice(const struct task_struct *p, const int nice)
 	return (nice_rlim <= task_rlimit(p, RLIMIT_NICE) ||
 		capable(CAP_SYS_NICE));
 }
+EXPORT_SYMBOL_GPL(can_nice);
 
 #ifdef __ARCH_WANT_SYS_NICE
 
diff --git a/mm/memory.c b/mm/memory.c
index 2f42aab..9b59d90 100644
--- a/mm/memory.c
+++ b/mm/memory.c
@@ -1421,6 +1421,7 @@ static void zap_page_range_single(struct vm_area_struct *vma, unsigned long addr
 	mmu_notifier_invalidate_range_end(mm, address, end);
 	tlb_finish_mmu(&tlb, address, end);
 }
+EXPORT_SYMBOL_GPL(zap_page_range);
 
 /**
  * zap_vma_ptes - remove ptes mapping the vma
@@ -3096,6 +3097,7 @@ static inline int check_stack_guard_page(struct vm_area_struct *vma, unsigned lo
 	}
 	return 0;
 }
+EXPORT_SYMBOL_GPL(vmtruncate_range);
 
 /*
  * We enter with non-exclusive mmap_sem (to exclude vma changes,
diff --git a/mm/shmem.c b/mm/shmem.c
index 58c4a47..dc90804 100644
--- a/mm/shmem.c
+++ b/mm/shmem.c
@@ -2557,6 +2557,16 @@ EXPORT_SYMBOL_GPL(shmem_truncate_range);
 
 /* common code */
 
+void shmem_set_file(struct vm_area_struct *vma, struct file *file)
+{
+	if (vma->vm_file)
+		fput(vma->vm_file);
+	vma->vm_file = file;
+	vma->vm_ops = &shmem_vm_ops;
+	vma->vm_flags |= VM_CAN_NONLINEAR;
+}
+EXPORT_SYMBOL_GPL(shmem_set_file);
+
 /**
  * shmem_file_setup - get an unlinked file living in tmpfs
  * @name: name for dentry (to be seen in /proc/<pid>/maps
@@ -2634,11 +2644,8 @@ int shmem_zero_setup(struct vm_area_struct *vma)
 	if (IS_ERR(file))
 		return PTR_ERR(file);
 
-	if (vma->vm_file)
-		fput(vma->vm_file);
-	vma->vm_file = file;
-	vma->vm_ops = &shmem_vm_ops;
-	vma->vm_flags |= VM_CAN_NONLINEAR;
+	shmem_set_file(vma, file);
+
 	return 0;
 }
 
diff --git a/mm/vmalloc.c b/mm/vmalloc.c
index 4284fb2..3fcb1d2 100644
--- a/mm/vmalloc.c
+++ b/mm/vmalloc.c
@@ -1258,6 +1258,7 @@ void unmap_kernel_range(unsigned long addr, unsigned long size)
 	vunmap_page_range(addr, end);
 	flush_tlb_kernel_range(addr, end);
 }
+EXPORT_SYMBOL_GPL(unmap_kernel_range);
 
 int map_vm_area(struct vm_struct *area, pgprot_t prot, struct page ***pages)
 {
@@ -1395,6 +1396,7 @@ struct vm_struct *get_vm_area(unsigned long size, unsigned long flags)
 	return __get_vm_area_node(size, 1, flags, VMALLOC_START, VMALLOC_END,
 				-1, GFP_KERNEL, __builtin_return_address(0));
 }
+EXPORT_SYMBOL_GPL(get_vm_area);
 
 struct vm_struct *get_vm_area_caller(unsigned long size, unsigned long flags,
 				const void *caller)
-- 
1.8.1.4

